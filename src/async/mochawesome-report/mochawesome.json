{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2017-08-11T07:16:36.593Z",
    "end": "2017-08-11T07:16:36.608Z",
    "duration": 15,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Async tests",
        "suites": [],
        "tests": [
          {
            "title": "Should return...",
            "fullTitle": "Async tests Should return...",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "dirSync.syncRead();\n// expect('a').to.equal('a');",
            "err": {},
            "isRoot": false,
            "uuid": "4ebac85a-0cdb-48de-84fc-26f3814e7aff",
            "parentUUID": "627d8b53-8ea9-490e-9256-186e3dd7784d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should read async",
            "fullTitle": "Async tests Should read async",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "dirSync.asyncRead();",
            "err": {},
            "isRoot": false,
            "uuid": "bfbfb002-c290-4e65-8db7-33d700a91bfb",
            "parentUUID": "627d8b53-8ea9-490e-9256-186e3dd7784d",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/async_tests.js",
        "uuid": "627d8b53-8ea9-490e-9256-186e3dd7784d",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/vinod/programming/JS/node/basics/async/test/async_tests.js",
        "passes": [
          {
            "title": "Should return...",
            "fullTitle": "Async tests Should return...",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "dirSync.syncRead();\n// expect('a').to.equal('a');",
            "err": {},
            "isRoot": false,
            "uuid": "4ebac85a-0cdb-48de-84fc-26f3814e7aff",
            "parentUUID": "627d8b53-8ea9-490e-9256-186e3dd7784d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should read async",
            "fullTitle": "Async tests Should read async",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "dirSync.asyncRead();",
            "err": {},
            "isRoot": false,
            "uuid": "bfbfb002-c290-4e65-8db7-33d700a91bfb",
            "parentUUID": "627d8b53-8ea9-490e-9256-186e3dd7784d",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1,
        "rootEmpty": false
      },
      {
        "title": "Code reuse tests",
        "suites": [],
        "tests": [
          {
            "title": "should count files synchronously",
            "fullTitle": "Code reuse tests should count files synchronously",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"For \" + path1 + \": \" + cr.countFilesSync(path1));\nconsole.log(\"For \" + path2 + \": \" + cr.countFilesSync(path2));",
            "err": {},
            "isRoot": false,
            "uuid": "28c2316f-9ca2-49f1-a501-4764a013e5ae",
            "parentUUID": "4667cf2d-6259-4673-9a11-adc12eba570f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should count files asynchronously",
            "fullTitle": "Code reuse tests should count files asynchronously",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "cr.countFilesAsync(path1, logCount);\ncr.countFilesAsync(path2, logCount);",
            "err": {},
            "isRoot": false,
            "uuid": "ce679214-1447-46ac-9ebe-55d4783124af",
            "parentUUID": "4667cf2d-6259-4673-9a11-adc12eba570f",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/code-reuse-tests.js",
        "uuid": "4667cf2d-6259-4673-9a11-adc12eba570f",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/vinod/programming/JS/node/basics/async/test/code-reuse-tests.js",
        "passes": [
          {
            "title": "should count files synchronously",
            "fullTitle": "Code reuse tests should count files synchronously",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "console.log(\"For \" + path1 + \": \" + cr.countFilesSync(path1));\nconsole.log(\"For \" + path2 + \": \" + cr.countFilesSync(path2));",
            "err": {},
            "isRoot": false,
            "uuid": "28c2316f-9ca2-49f1-a501-4764a013e5ae",
            "parentUUID": "4667cf2d-6259-4673-9a11-adc12eba570f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should count files asynchronously",
            "fullTitle": "Code reuse tests should count files asynchronously",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "cr.countFilesAsync(path1, logCount);\ncr.countFilesAsync(path2, logCount);",
            "err": {},
            "isRoot": false,
            "uuid": "ce679214-1447-46ac-9ebe-55d4783124af",
            "parentUUID": "4667cf2d-6259-4673-9a11-adc12eba570f",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "FileOps tests",
        "suites": [],
        "tests": [
          {
            "title": "Async file ops",
            "fullTitle": "FileOps tests Async file ops",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "fileOps.asyncFileOp();",
            "err": {},
            "isRoot": false,
            "uuid": "f2fd99d0-1b5b-4c7a-b5a9-2a0f8b81567d",
            "parentUUID": "8bd84c39-67ae-47d1-91c1-b7b581149304",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/file-ops-tests.js",
        "uuid": "8bd84c39-67ae-47d1-91c1-b7b581149304",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "FileOps tests \"before each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fs.appendFileSync(\"./processId.txt\", \"test\");",
            "err": {},
            "isRoot": false,
            "uuid": "25d7dd38-53ee-43e7-8720-72555d9dcbee",
            "parentUUID": "8bd84c39-67ae-47d1-91c1-b7b581149304",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "FileOps tests \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fs.unlinkSync(\"./processIdOld.txt\");",
            "err": {},
            "isRoot": false,
            "uuid": "839ee2f4-b586-42b8-a1f2-8ba217bf666d",
            "parentUUID": "8bd84c39-67ae-47d1-91c1-b7b581149304",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/vinod/programming/JS/node/basics/async/test/file-ops-tests.js",
        "passes": [
          {
            "title": "Async file ops",
            "fullTitle": "FileOps tests Async file ops",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "fileOps.asyncFileOp();",
            "err": {},
            "isRoot": false,
            "uuid": "f2fd99d0-1b5b-4c7a-b5a9-2a0f8b81567d",
            "parentUUID": "8bd84c39-67ae-47d1-91c1-b7b581149304",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Parallel tests",
        "suites": [],
        "tests": [
          {
            "title": "should return x total size of files in a dir in bytes",
            "fullTitle": "Parallel tests should return x total size of files in a dir in bytes",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "par.syncFileCount(\".\");",
            "err": {},
            "isRoot": false,
            "uuid": "56eb120c-9744-4fd4-886b-822618c7a037",
            "parentUUID": "8a09e1a2-96d3-4fb7-b697-b6920b9fa161",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return total fie size in a dir asynchronouslly",
            "fullTitle": "Parallel tests should return total fie size in a dir asynchronouslly",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "par.asyncFileCount();",
            "err": {},
            "isRoot": false,
            "uuid": "f623365a-047b-46f3-8f15-8d22c5c21afd",
            "parentUUID": "8a09e1a2-96d3-4fb7-b697-b6920b9fa161",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/parallel-tests.js",
        "uuid": "8a09e1a2-96d3-4fb7-b697-b6920b9fa161",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/vinod/programming/JS/node/basics/async/test/parallel-tests.js",
        "passes": [
          {
            "title": "should return x total size of files in a dir in bytes",
            "fullTitle": "Parallel tests should return x total size of files in a dir in bytes",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "par.syncFileCount(\".\");",
            "err": {},
            "isRoot": false,
            "uuid": "56eb120c-9744-4fd4-886b-822618c7a037",
            "parentUUID": "8a09e1a2-96d3-4fb7-b697-b6920b9fa161",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return total fie size in a dir asynchronouslly",
            "fullTitle": "Parallel tests should return total fie size in a dir asynchronouslly",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "par.asyncFileCount();",
            "err": {},
            "isRoot": false,
            "uuid": "f623365a-047b-46f3-8f15-8d22c5c21afd",
            "parentUUID": "8a09e1a2-96d3-4fb7-b697-b6920b9fa161",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Scope tests",
        "suites": [],
        "tests": [
          {
            "title": "should return defined global name - Hartfield",
            "fullTitle": "Scope tests should return defined global name - Hartfield",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(scope.showName() === 'Hartfield');",
            "err": {},
            "isRoot": false,
            "uuid": "f82e17b0-9c4b-47fa-a08a-8831570d2f00",
            "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return *Idiot* as the function level variable was not defined with var",
            "fullTitle": "Scope tests should return *Idiot* as the function level variable was not defined with var",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(scope.getIdiotsName() === 'Idiot');",
            "err": {},
            "isRoot": false,
            "uuid": "7ac0dec8-b5c5-4bdb-be6f-ea3783f3755b",
            "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return *local name* as the function var is defined with var",
            "fullTitle": "Scope tests should return *local name* as the function var is defined with var",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(scope.getLocalName() === 'local name');",
            "err": {},
            "isRoot": false,
            "uuid": "f32538b1-47f0-458f-b11e-d03ea27cbde6",
            "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/scope-tests.js",
        "uuid": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/vinod/programming/JS/node/basics/async/test/scope-tests.js",
        "passes": [
          {
            "title": "should return defined global name - Hartfield",
            "fullTitle": "Scope tests should return defined global name - Hartfield",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(scope.showName() === 'Hartfield');",
            "err": {},
            "isRoot": false,
            "uuid": "f82e17b0-9c4b-47fa-a08a-8831570d2f00",
            "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return *Idiot* as the function level variable was not defined with var",
            "fullTitle": "Scope tests should return *Idiot* as the function level variable was not defined with var",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(scope.getIdiotsName() === 'Idiot');",
            "err": {},
            "isRoot": false,
            "uuid": "7ac0dec8-b5c5-4bdb-be6f-ea3783f3755b",
            "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return *local name* as the function var is defined with var",
            "fullTitle": "Scope tests should return *local name* as the function var is defined with var",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(scope.getLocalName() === 'local name');",
            "err": {},
            "isRoot": false,
            "uuid": "f32538b1-47f0-458f-b11e-d03ea27cbde6",
            "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "d7941332-1e61-4aaf-8cb1-5fae81809ea8",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Should return...",
      "fullTitle": "Async tests Should return...",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dirSync.syncRead();\n// expect('a').to.equal('a');",
      "err": {},
      "isRoot": false,
      "uuid": "4ebac85a-0cdb-48de-84fc-26f3814e7aff",
      "parentUUID": "627d8b53-8ea9-490e-9256-186e3dd7784d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should read async",
      "fullTitle": "Async tests Should read async",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dirSync.asyncRead();",
      "err": {},
      "isRoot": false,
      "uuid": "bfbfb002-c290-4e65-8db7-33d700a91bfb",
      "parentUUID": "627d8b53-8ea9-490e-9256-186e3dd7784d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should count files synchronously",
      "fullTitle": "Code reuse tests should count files synchronously",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"For \" + path1 + \": \" + cr.countFilesSync(path1));\nconsole.log(\"For \" + path2 + \": \" + cr.countFilesSync(path2));",
      "err": {},
      "isRoot": false,
      "uuid": "28c2316f-9ca2-49f1-a501-4764a013e5ae",
      "parentUUID": "4667cf2d-6259-4673-9a11-adc12eba570f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should count files asynchronously",
      "fullTitle": "Code reuse tests should count files asynchronously",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "cr.countFilesAsync(path1, logCount);\ncr.countFilesAsync(path2, logCount);",
      "err": {},
      "isRoot": false,
      "uuid": "ce679214-1447-46ac-9ebe-55d4783124af",
      "parentUUID": "4667cf2d-6259-4673-9a11-adc12eba570f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Async file ops",
      "fullTitle": "FileOps tests Async file ops",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "fileOps.asyncFileOp();",
      "err": {},
      "isRoot": false,
      "uuid": "f2fd99d0-1b5b-4c7a-b5a9-2a0f8b81567d",
      "parentUUID": "8bd84c39-67ae-47d1-91c1-b7b581149304",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return x total size of files in a dir in bytes",
      "fullTitle": "Parallel tests should return x total size of files in a dir in bytes",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "par.syncFileCount(\".\");",
      "err": {},
      "isRoot": false,
      "uuid": "56eb120c-9744-4fd4-886b-822618c7a037",
      "parentUUID": "8a09e1a2-96d3-4fb7-b697-b6920b9fa161",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return total fie size in a dir asynchronouslly",
      "fullTitle": "Parallel tests should return total fie size in a dir asynchronouslly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "par.asyncFileCount();",
      "err": {},
      "isRoot": false,
      "uuid": "f623365a-047b-46f3-8f15-8d22c5c21afd",
      "parentUUID": "8a09e1a2-96d3-4fb7-b697-b6920b9fa161",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return defined global name - Hartfield",
      "fullTitle": "Scope tests should return defined global name - Hartfield",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(scope.showName() === 'Hartfield');",
      "err": {},
      "isRoot": false,
      "uuid": "f82e17b0-9c4b-47fa-a08a-8831570d2f00",
      "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return *Idiot* as the function level variable was not defined with var",
      "fullTitle": "Scope tests should return *Idiot* as the function level variable was not defined with var",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(scope.getIdiotsName() === 'Idiot');",
      "err": {},
      "isRoot": false,
      "uuid": "7ac0dec8-b5c5-4bdb-be6f-ea3783f3755b",
      "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return *local name* as the function var is defined with var",
      "fullTitle": "Scope tests should return *local name* as the function var is defined with var",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(scope.getLocalName() === 'local name');",
      "err": {},
      "isRoot": false,
      "uuid": "f32538b1-47f0-458f-b11e-d03ea27cbde6",
      "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Should return...",
      "fullTitle": "Async tests Should return...",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dirSync.syncRead();\n// expect('a').to.equal('a');",
      "err": {},
      "isRoot": false,
      "uuid": "4ebac85a-0cdb-48de-84fc-26f3814e7aff",
      "parentUUID": "627d8b53-8ea9-490e-9256-186e3dd7784d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Should read async",
      "fullTitle": "Async tests Should read async",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dirSync.asyncRead();",
      "err": {},
      "isRoot": false,
      "uuid": "bfbfb002-c290-4e65-8db7-33d700a91bfb",
      "parentUUID": "627d8b53-8ea9-490e-9256-186e3dd7784d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should count files synchronously",
      "fullTitle": "Code reuse tests should count files synchronously",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"For \" + path1 + \": \" + cr.countFilesSync(path1));\nconsole.log(\"For \" + path2 + \": \" + cr.countFilesSync(path2));",
      "err": {},
      "isRoot": false,
      "uuid": "28c2316f-9ca2-49f1-a501-4764a013e5ae",
      "parentUUID": "4667cf2d-6259-4673-9a11-adc12eba570f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should count files asynchronously",
      "fullTitle": "Code reuse tests should count files asynchronously",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "cr.countFilesAsync(path1, logCount);\ncr.countFilesAsync(path2, logCount);",
      "err": {},
      "isRoot": false,
      "uuid": "ce679214-1447-46ac-9ebe-55d4783124af",
      "parentUUID": "4667cf2d-6259-4673-9a11-adc12eba570f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "Async file ops",
      "fullTitle": "FileOps tests Async file ops",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "fileOps.asyncFileOp();",
      "err": {},
      "isRoot": false,
      "uuid": "f2fd99d0-1b5b-4c7a-b5a9-2a0f8b81567d",
      "parentUUID": "8bd84c39-67ae-47d1-91c1-b7b581149304",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return x total size of files in a dir in bytes",
      "fullTitle": "Parallel tests should return x total size of files in a dir in bytes",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "par.syncFileCount(\".\");",
      "err": {},
      "isRoot": false,
      "uuid": "56eb120c-9744-4fd4-886b-822618c7a037",
      "parentUUID": "8a09e1a2-96d3-4fb7-b697-b6920b9fa161",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return total fie size in a dir asynchronouslly",
      "fullTitle": "Parallel tests should return total fie size in a dir asynchronouslly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "par.asyncFileCount();",
      "err": {},
      "isRoot": false,
      "uuid": "f623365a-047b-46f3-8f15-8d22c5c21afd",
      "parentUUID": "8a09e1a2-96d3-4fb7-b697-b6920b9fa161",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return defined global name - Hartfield",
      "fullTitle": "Scope tests should return defined global name - Hartfield",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(scope.showName() === 'Hartfield');",
      "err": {},
      "isRoot": false,
      "uuid": "f82e17b0-9c4b-47fa-a08a-8831570d2f00",
      "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return *Idiot* as the function level variable was not defined with var",
      "fullTitle": "Scope tests should return *Idiot* as the function level variable was not defined with var",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(scope.getIdiotsName() === 'Idiot');",
      "err": {},
      "isRoot": false,
      "uuid": "7ac0dec8-b5c5-4bdb-be6f-ea3783f3755b",
      "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return *local name* as the function var is defined with var",
      "fullTitle": "Scope tests should return *local name* as the function var is defined with var",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(scope.getLocalName() === 'local name');",
      "err": {},
      "isRoot": false,
      "uuid": "f32538b1-47f0-458f-b11e-d03ea27cbde6",
      "parentUUID": "f78b5e3a-3ce6-46c8-bb27-48db5398111e",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}